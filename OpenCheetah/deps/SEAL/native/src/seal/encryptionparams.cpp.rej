--- native/src/seal/encryptionparams.cpp
+++ native/src/seal/encryptionparams.cpp
@@ -23,9 +23,11 @@ namespace seal
             uint64_t poly_modulus_degree64 = static_cast<uint64_t>(poly_modulus_degree_);
             uint64_t coeff_modulus_size64 = static_cast<uint64_t>(coeff_modulus_.size());
             uint8_t scheme = static_cast<uint8_t>(scheme_);
+            uint64_t n_special_primes = static_cast<uint64_t>(n_special_primes_);
 
             stream.write(reinterpret_cast<const char *>(&scheme), sizeof(uint8_t));
             stream.write(reinterpret_cast<const char *>(&poly_modulus_degree64), sizeof(uint64_t));
+            stream.write(reinterpret_cast<const char *>(&n_special_primes), sizeof(uint64_t));
             stream.write(reinterpret_cast<const char *>(&coeff_modulus_size64), sizeof(uint64_t));
             for (const auto &mod : coeff_modulus_)
             {
@@ -128,6 +130,7 @@ namespace seal
         size_t total_uint64_count = add_safe(
             size_t(1), // scheme
             size_t(1), // poly_modulus_degree
+			size_t(1), // n_special_primes
             coeff_modulus_size, plain_modulus_.uint64_count());
 
         auto param_data(allocate_uint(total_uint64_count, pool_));
@@ -139,6 +142,8 @@ namespace seal
         // Write the poly_modulus_degree. Note that it will always be positive.
         *param_data_ptr++ = static_cast<uint64_t>(poly_modulus_degree_);
 
+        *param_data_ptr++ = static_cast<uint64_t>(n_special_primes_);
+
         for (const auto &mod : coeff_modulus_)
         {
             *param_data_ptr++ = mod.value();
